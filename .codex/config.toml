[tool.codex]
model = "gpt-5-codex"
model_reasoning_effort = "high"

# MISSION: Fill documentation gaps identified in /docs/TODO/ analysis
# Create/extend task files to implement missing features while maintaining project consistency
goal = """
Fill all documentation gaps identified in /docs/TODO/ by creating or extending task files in /docs/tasks/.
Ensure all new tasks follow project architecture patterns: data-driven design, testable core systems,
usage-based skill progression, and formula-parameterized mechanics. Maintain consistency with existing
Milestones M1-M6 structure and conventions.
"""

[execution_phases]

# ============================================================================
# PHASE 0: Gap Analysis & Task Structure Review
# ============================================================================
[execution_phases.phase_0_gap_review]
name = "Review Gaps & Existing Task Structure"
priority = "CRITICAL"
estimated_effort = "15-20m"
objectives = [
  "Read all 11 TODO documents in /docs/TODO/ to understand identified gaps",
  "Read existing task files in /docs/tasks/ to understand current structure and conventions",
  "Read CONVENTIONS.md, ARCHITECTURE.md, COMBAT_RULES.md to understand design patterns",
  "Map gaps to potential Milestones (which gaps fit in existing M1-M6? which need new milestones?)",
  "Identify dependencies between gaps (e.g., Quest System needs Event Bus)",
  "Create master gap-filling plan with priority levels",
]
inputs = [
  "docs/TODO/*.md",
  "docs/tasks/TASK-*.md",
  "docs/CONVENTIONS.md",
  "docs/ARCHITECTURE.md",
  "docs/COMBAT_RULES.md",
]
outputs = [
  "codex_outputs/phase0_gap_master_plan.md",
  "codex_outputs/phase0_dependency_graph.md",
]
validation = [
  "All 11 gaps categorized by priority (Critical/High/Medium/Low)",
  "All gaps mapped to appropriate Milestones",
  "Dependencies identified and sequenced",
]
human_approval_required = true
approval_prompt = "Review gap analysis and filling plan. Priorities correct? Ready to start creating tasks?"

# ============================================================================
# PHASE 1: Critical Gap #1 - Magic System Implementation
# ============================================================================
[execution_phases.phase_1_magic_system_tasks]
name = "Create Magic System Implementation Tasks"
priority = "CRITICAL"
estimated_effort = "30-40m"
objectives = [
  "Read MAGIC_SYSTEM.md in full to understand design",
  "Read existing TASK-M2-04 (Combat-Core) to understand Cast intent hook",
  "Read existing TASK-M3-06 (Skill-System) to understand skill integration",
  "CREATE new task file: TASK-M2-MAGIC-01-Core-Magic-System.md",
  "  - Implement systems/magic_system.py (Fizzle, Resist, Mana consumption)",
  "  - Define clear interface between combat system and magic system",
  "  - Ensure NO Arcade dependencies (testable core)",
  "CREATE new task file: TASK-M3-MAGIC-01-Spells-Data-Schema.md",
  "  - Define data/spells.json schema with: id, name, circle, mana_cost, reagents, cast_rounds",
  "  - Create data/schemas/spells.schema.json for validation",
  "  - Implement loader with schema validation",
  "CREATE new task file: TASK-M2-MAGIC-02-Fizzle-Resist-Formulas.md",
  "  - Implement fizzle formula from MAGIC_SYSTEM.md (magery-based)",
  "  - Implement spell resist formula (resist_spells vs magery)",
  "  - Add parameters to data/combat_rules.json (no hardcoded values)",
  "CREATE new task file: TASK-M2-MAGIC-03-Cast-Rounds-Integration.md",
  "  - Integrate cast_rounds into turn manager (TASK-M2-04)",
  "  - Handle multi-turn casting, interruption logic",
  "EXTEND existing TASK-M6-UI-09 with dependencies on new magic tasks",
  "All tasks must reference MAGIC_SYSTEM.md as design doc",
  "All formulas must be parameterized in JSON (data-driven pattern)",
]
inputs = [
  "docs/MAGIC_SYSTEM.md",
  "docs/TODO/MAGIC_SYSTEM_TD.md",
  "docs/tasks/TASK-M2-04.md",
  "docs/tasks/TASK-M3-06.md",
  "docs/CONVENTIONS.md",
]
outputs = [
  "docs/tasks/TASK-M2-MAGIC-01-Core-Magic-System.md",
  "docs/tasks/TASK-M3-MAGIC-01-Spells-Data-Schema.md",
  "docs/tasks/TASK-M2-MAGIC-02-Fizzle-Resist-Formulas.md",
  "docs/tasks/TASK-M2-MAGIC-03-Cast-Rounds-Integration.md",
  "codex_outputs/phase1_magic_tasks_summary.md",
]
validation = [
  "All new tasks follow existing task file format",
  "All tasks specify: Milestone, Priority, Estimated Effort, Dependencies, Acceptance Criteria",
  "All formulas are parameterized in JSON (no hardcoded magic numbers)",
  "Magic system is testable without Arcade",
]
human_approval_required = true
approval_prompt = "Review magic system tasks. Design pattern consistent? Ready for Phase 2 (Dungeon Biomes)?"

# ============================================================================
# PHASE 2: Critical Gap #2 - Dungeon Biome System
# ============================================================================
[execution_phases.phase_2_dungeon_biomes_tasks]
name = "Create Dungeon Biome & Themed Generation Tasks"
priority = "CRITICAL"
estimated_effort = "25-35m"
objectives = [
  "Read DUNGEON_GENERATOR.md to understand biome vision",
  "Read existing TASK-M1-01 (BSP-Generator) to understand base generator",
  "CREATE new task file: TASK-M1-GEN-01-Biome-System.md",
  "  - Define data/biomes/*.json schema (tileset, factions, reagents_bias, loot_tables)",
  "  - Implement systems/biome_manager.py to load and apply biomes",
  "  - Extend BSP generator to use biome tilesets",
  "CREATE new task file: TASK-M1-GEN-02-Room-Tagging-System.md",
  "  - Implement semantic room tags (altar, crypt, boss_antechamber, etc.)",
  "  - Algorithm to assign tags based on room size, connectivity, distance from start",
  "CREATE new task file: TASK-M3-GEN-01-Threat-Budget-Spawner.md",
  "  - Implement threat-budget spawn algorithm from DUNGEON_GENERATOR.md",
  "  - Load data/encounters/*.json with mob threat values",
  "  - Integrate with existing monster system (TASK-M2-07)",
  "CREATE new task file: TASK-M1-GEN-03-Debug-Tools-Extended.md",
  "  - Implement F4 (Reachability Heatmap)",
  "  - Implement F5 (Spawn Overlay)",
  "  - Implement Ctrl+S (Map metadata dump)",
  "All tasks must maintain BSP core algorithm (no breaking changes to TASK-M1-01)",
  "Biome system must be data-driven (easy to add new biomes via JSON)",
]
inputs = [
  "docs/DUNGEON_GENERATOR.md",
  "docs/TODO/DUNGEON_GENERATOR_TD.md",
  "docs/tasks/TASK-M1-01.md",
  "docs/tasks/TASK-M2-07.md",
]
outputs = [
  "docs/tasks/TASK-M1-GEN-01-Biome-System.md",
  "docs/tasks/TASK-M1-GEN-02-Room-Tagging-System.md",
  "docs/tasks/TASK-M3-GEN-01-Threat-Budget-Spawner.md",
  "docs/tasks/TASK-M1-GEN-03-Debug-Tools-Extended.md",
  "codex_outputs/phase2_biome_tasks_summary.md",
]
validation = [
  "Biome system integrates cleanly with existing BSP generator",
  "All new data schemas documented (biomes.json, encounters.json)",
  "Threat-budget algorithm is deterministic with seeded RNG",
]
human_approval_required = true
approval_prompt = "Review dungeon biome tasks. Ready for Phase 3 (Economy & Vendors)?"

# ============================================================================
# PHASE 3: High Priority Gap #1 - Economy & Vendor System
# ============================================================================
[execution_phases.phase_3_economy_vendors_tasks]
name = "Create Economy & Vendor System Tasks"
priority = "HIGH"
estimated_effort = "20-30m"
objectives = [
  "Read ECONOMY_AND_VENDORS.md for design",
  "Read existing TASK-M3-13 (Currency Model) and TASK-M6-UI-11 (Merchant UI)",
  "CREATE new task file: TASK-M4-ECON-01-Core-Economy-System.md",
  "  - Implement systems/economy.py with price formula",
  "  - Formula: base_value * rarity_factor * quality_mod * vendor_modifier",
  "  - Parameters in data/combat_rules.json or new data/economy_rules.json",
  "CREATE new task file: TASK-M4-ECON-02-Vendor-Data-Schema.md",
  "  - Define data/vendors/*.json schema",
  "  - Implement vendor loader with validation",
  "CREATE new task file: TASK-M4-ECON-03-Restock-Mechanic.md",
  "  - Implement restock logic (ties to Timekeeper from TASK-M4-16)",
  "  - Per-vendor inventory state management",
  "EXTEND existing TASK-M6-UI-11 with backend dependencies on new tasks",
  "All pricing formulas must be parameterized (data-driven)",
]
inputs = [
  "docs/ECONOMY_AND_VENDORS.md",
  "docs/TODO/ECONOMY_AND_VENDORS_TD.md",
  "docs/tasks/TASK-M3-13.md",
  "docs/tasks/TASK-M6-UI-11.md",
  "docs/tasks/TASK-M4-16.md",
]
outputs = [
  "docs/tasks/TASK-M4-ECON-01-Core-Economy-System.md",
  "docs/tasks/TASK-M4-ECON-02-Vendor-Data-Schema.md",
  "docs/tasks/TASK-M4-ECON-03-Restock-Mechanic.md",
  "codex_outputs/phase3_economy_tasks_summary.md",
]
validation = [
  "Economy system testable without UI",
  "Vendor data schema includes restock_turns, price_modifier fields",
  "Integration with Timekeeper clearly defined",
]
human_approval_required = true
approval_prompt = "Review economy tasks. Ready for Phase 4 (Procedural Itemization)?"

# ============================================================================
# PHASE 4: High Priority Gap #2 - Procedural Item Generation
# ============================================================================
[execution_phases.phase_4_procedural_items_tasks]
name = "Create Procedural Itemization System Tasks"
priority = "HIGH"
estimated_effort = "30-40m"
objectives = [
  "Read ITEMIZATION_DESIGN.md for ARPG-style loot vision",
  "Read existing TASK-M3-02 (Items Data Model) and TASK-M3-08 (Loot Tables)",
  "CREATE new task file: TASK-M3-ITEM-01-Affix-Generator.md",
  "  - Implement systems/affix_generator.py (budget-based prefix/suffix system)",
  "  - Algorithm: roll rarity → allocate budget → select random affixes",
  "CREATE new task file: TASK-M3-ITEM-02-Affixes-Data-Schema.md",
  "  - Define data/affixes.json schema (prefix/suffix with tiers, budget costs)",
  "  - Implement loader with validation",
  "CREATE new task file: TASK-M3-ITEM-03-Material-Quality-System.md",
  "  - Implement material system (iron, steel, valorite, etc.)",
  "  - Implement quality modifiers (worn, fine, masterwork)",
  "  - Integrate with base item stats",
  "CREATE new task file: TASK-M3-ITEM-04-Uniques-Sets-System.md",
  "  - Define data/uniques.json schema",
  "  - Implement unique item generation (fixed affixes)",
  "  - Implement set bonuses (requires wearing multiple set items)",
  "EXTEND existing TASK-M3-08 to call affix generator on loot drops",
  "All systems must be seeded for deterministic testing",
]
inputs = [
  "docs/ITEMIZATION_DESIGN.md",
  "docs/TODO/ITEMIZATION_DESIGN_TD.md",
  "docs/tasks/TASK-M3-02.md",
  "docs/tasks/TASK-M3-08.md",
]
outputs = [
  "docs/tasks/TASK-M3-ITEM-01-Affix-Generator.md",
  "docs/tasks/TASK-M3-ITEM-02-Affixes-Data-Schema.md",
  "docs/tasks/TASK-M3-ITEM-03-Material-Quality-System.md",
  "docs/tasks/TASK-M3-ITEM-04-Uniques-Sets-System.md",
  "codex_outputs/phase4_itemization_tasks_summary.md",
]
validation = [
  "Affix generator is testable with seeded RNG",
  "Budget system prevents overpowered items",
  "Material/quality system integrates with existing item model",
]
human_approval_required = true
approval_prompt = "Review procedural itemization tasks. This is a major new system - design OK? Ready for Phase 5 (Quest System)?"

# ============================================================================
# PHASE 5: High Priority Gap #3 - Quest System
# ============================================================================
[execution_phases.phase_5_quest_system_tasks]
name = "Create Quest System Implementation Tasks"
priority = "HIGH"
estimated_effort = "25-35m"
objectives = [
  "Read QUEST_SYSTEM.md for event-driven quest design",
  "Read existing event-emitting systems (TASK-M2-04, TASK-M3-03, TASK-M3-05)",
  "CREATE new task file: TASK-M4-QUEST-01-Core-Quest-Engine.md",
  "  - Implement systems/quest_engine.py (FSM: offered/active/succeeded/failed)",
  "  - Event listener hooks (onKill, onCollect, onUseItem, onLocation, onTime)",
  "  - Progress tracking for multi-step objectives",
  "CREATE new task file: TASK-M4-QUEST-02-Quest-Data-Schema.md",
  "  - Define data/quests/*.json schema",
  "  - Implement loader with validation",
  "CREATE new task file: TASK-M4-QUEST-03-Event-Bus-Integration.md",
  "  - Create global event bus (or extend existing system)",
  "  - Connect quest engine as listener to combat/inventory/interaction events",
  "EXTEND existing TASK-M5-01 (Save Schema) to include quest progress",
  "EXTEND existing TASK-M6-UI-02 (HUD Journal) to display quest objectives",
  "All quests must be data-driven (easy to add new quests via JSON)",
]
inputs = [
  "docs/QUEST_SYSTEM.md",
  "docs/TODO/QUEST_SYSTEM_TD.md",
  "docs/tasks/TASK-M2-04.md",
  "docs/tasks/TASK-M3-03.md",
  "docs/tasks/TASK-M5-01.md",
  "docs/tasks/TASK-M6-UI-02.md",
]
outputs = [
  "docs/tasks/TASK-M4-QUEST-01-Core-Quest-Engine.md",
  "docs/tasks/TASK-M4-QUEST-02-Quest-Data-Schema.md",
  "docs/tasks/TASK-M4-QUEST-03-Event-Bus-Integration.md",
  "codex_outputs/phase5_quest_tasks_summary.md",
]
validation = [
  "Quest engine is testable without UI (mock events)",
  "Event bus design doesn't introduce tight coupling",
  "Save/load includes quest state",
]
human_approval_required = true
approval_prompt = "Review quest system tasks. Event-driven design sound? Ready for Phase 6 (Input & Rebinding)?"

# ============================================================================
# PHASE 6: Medium Priority Gap #1 - Advanced Input System
# ============================================================================
[execution_phases.phase_6_input_rebinding_tasks]
name = "Create Advanced Input & Rebinding System Tasks"
priority = "MEDIUM"
estimated_effort = "20-30m"
objectives = [
  "Read INPUT_AND_REBIND.md for context-aware input vision",
  "Read existing TASK-M1-10 (Basic Input & Keybinds)",
  "CREATE new task file: TASK-M1-INPUT-01-Context-Input-Manager.md",
  "  - Implement context stack (UI > Combat > Overworld)",
  "  - Context-specific keybinding resolution",
  "CREATE new task file: TASK-M1-INPUT-02-Controls-JSON-Schema.md",
  "  - Define config/controls.json schema (includes gamepad, key-repeat, deadzones)",
  "  - Implement loader",
  "CREATE new task file: TASK-M6-UI-INPUT-01-Rebinding-UI.md",
  "  - Implement rebinding screen with conflict detection",
  "  - 'Listening' mode for key capture",
  "  - Swap/Replace dialog for conflicts",
  "CREATE new task file: TASK-M1-INPUT-03-Gamepad-Support.md",
  "  - Implement gamepad input handling",
  "  - Deadzones, sensitivity, button mapping",
  "EXTEND existing TASK-M1-10 to be foundation for new input system",
  "All input configuration must be data-driven (controls.json)",
]
inputs = [
  "docs/INPUT_AND_REBIND.md",
  "docs/TODO/INPUT_AND_REBIND_TD.md",
  "docs/tasks/TASK-M1-10.md",
]
outputs = [
  "docs/tasks/TASK-M1-INPUT-01-Context-Input-Manager.md",
  "docs/tasks/TASK-M1-INPUT-02-Controls-JSON-Schema.md",
  "docs/tasks/TASK-M6-UI-INPUT-01-Rebinding-UI.md",
  "docs/tasks/TASK-M1-INPUT-03-Gamepad-Support.md",
  "codex_outputs/phase6_input_tasks_summary.md",
]
validation = [
  "Context stack prevents UI/gameplay input conflicts",
  "Rebinding system handles all edge cases (conflicts, duplicates)",
  "Gamepad support works with various controller types",
]
human_approval_required = true
approval_prompt = "Review input system tasks. Ready for Phase 7 (Audio System)?"

# ============================================================================
# PHASE 7: Medium Priority Gap #2 - Audio System Implementation
# ============================================================================
[execution_phases.phase_7_audio_system_tasks]
name = "Create Audio System Implementation Tasks"
priority = "MEDIUM"
estimated_effort = "15-25m"
objectives = [
  "Read SOUND_DESIGN.md for mixer/bus architecture",
  "Read existing TASK-M4-15 (Audio Hooks - placeholder API)",
  "CREATE new task file: TASK-M4-AUDIO-01-Audio-Mixer-Engine.md",
  "  - Implement audio mixer with buses (MUSIC, SFX, UI)",
  "  - Volume control per bus",
  "  - Sound loading and management",
  "CREATE new task file: TASK-M4-AUDIO-02-Context-Sound-Selection.md",
  "  - Implement rule-based sound selection (floor type → footstep sound)",
  "  - Sound variant system (random selection from pool)",
  "CREATE new task file: TASK-M4-AUDIO-03-Advanced-Audio-Features.md",
  "  - Implement 3D positioning (distance attenuation, panning)",
  "  - Implement snapshots/states for reverb/ambience changes",
  "EXTEND existing TASK-M4-15 to connect to new audio mixer",
  "All sound configuration must be data-driven (audio/sounds.json)",
]
inputs = [
  "docs/SOUND_DESIGN.md",
  "docs/TODO/SOUND_DESIGN_TD.md",
  "docs/tasks/TASK-M4-15.md",
]
outputs = [
  "docs/tasks/TASK-M4-AUDIO-01-Audio-Mixer-Engine.md",
  "docs/tasks/TASK-M4-AUDIO-02-Context-Sound-Selection.md",
  "docs/tasks/TASK-M4-AUDIO-03-Advanced-Audio-Features.md",
  "codex_outputs/phase7_audio_tasks_summary.md",
]
validation = [
  "Audio mixer testable without Arcade (mock audio backend)",
  "Sound selection rules are data-driven",
  "3D audio integrates with existing tile system",
]
human_approval_required = true
approval_prompt = "Review audio system tasks. Ready for Phase 8 (Tutorial/FTUE)?"

# ============================================================================
# PHASE 8: Medium Priority Gap #3 - Tutorial & FTUE System
# ============================================================================
[execution_phases.phase_8_tutorial_ftue_tasks]
name = "Create Tutorial & First Time User Experience Tasks"
priority = "MEDIUM"
estimated_effort = "20-30m"
objectives = [
  "Read TUTORIAL_FTUE.md for phased tutorial design",
  "CREATE new task file: TASK-M7-FTUE-01-Character-Creation-Screen.md",
  "  - Implement character creation UI (template selection or custom)",
  "  - Starting stat/skill point allocation",
  "CREATE new task file: TASK-M7-FTUE-02-Tutorial-Manager.md",
  "  - Implement tutorial state machine (track progress through phases)",
  "  - Trigger context-sensitive prompts",
  "  - Save 'tutorial completed' flag",
  "CREATE new task file: TASK-M7-FTUE-03-Tutorial-UI-Overlay.md",
  "  - Implement tutorial overlay (golden boxes, animated arrows)",
  "  - Highlight system for UI elements/entities",
  "CREATE new task file: TASK-M7-FTUE-04-Scripted-Events-System.md",
  "  - Implement system for scripted event sequences",
  "  - Tutorial-specific content (abbey NPCs, tutorial quest, tutorial enemy)",
  "CREATE new task file: TASK-M7-FTUE-05-Tutorial-Content-Data.md",
  "  - Create data/tutorial_quests.json",
  "  - Create data/abbey_npcs.json with dialogues",
  "EXTEND existing TASK-M5-01 to include tutorial progress in save",
  "Tutorial must be skippable for experienced players",
]
inputs = [
  "docs/TUTORIAL_FTUE.md",
  "docs/TODO/TUTORIAL_FTUE_TD.md",
  "docs/QUEST_SYSTEM.md",
  "docs/tasks/TASK-M5-01.md",
]
outputs = [
  "docs/tasks/TASK-M7-FTUE-01-Character-Creation-Screen.md",
  "docs/tasks/TASK-M7-FTUE-02-Tutorial-Manager.md",
  "docs/tasks/TASK-M7-FTUE-03-Tutorial-UI-Overlay.md",
  "docs/tasks/TASK-M7-FTUE-04-Scripted-Events-System.md",
  "docs/tasks/TASK-M7-FTUE-05-Tutorial-Content-Data.md",
  "codex_outputs/phase8_tutorial_tasks_summary.md",
]
validation = [
  "Tutorial system is independent module (can be disabled)",
  "Scripted events don't break save/load",
  "Character creation integrates with existing stat/skill systems",
]
human_approval_required = true
approval_prompt = "Review tutorial/FTUE tasks. Ready for Phase 9 (Localization)?"

# ============================================================================
# PHASE 9: Low Priority Gap - Localization System
# ============================================================================
[execution_phases.phase_9_localization_tasks]
name = "Create Localization (i18n) System Tasks"
priority = "LOW"
estimated_effort = "15-20m"
objectives = [
  "Read LOCALIZATION.md and CONVENTIONS.md Phase 3 notes",
  "CREATE new task file: TASK-M8-I18N-01-Localization-Service.md",
  "  - Implement LocalizationManager to load i18n/*.json",
  "  - translate(key, params) function",
  "  - Language switching at runtime",
  "CREATE new task file: TASK-M8-I18N-02-Validation-Tooling.md",
  "  - Implement tools/i18n/check_missing_keys.py",
  "  - Detect untranslated keys, unused keys",
  "CREATE new task file: TASK-M8-I18N-03-CI-Integration.md",
  "  - Extend .github/workflows/ci.yml to run validation",
  "  - Fail build on missing keys",
  "EXTEND all UI tasks to use localization keys instead of hardcoded strings",
  "Follow CONVENTIONS.md: IDs in data/*.json, display names in i18n/*.json",
]
inputs = [
  "docs/LOCALIZATION.md",
  "docs/TODO/LOCALIZATION_TD.md",
  "docs/CONVENTIONS.md",
]
outputs = [
  "docs/tasks/TASK-M8-I18N-01-Localization-Service.md",
  "docs/tasks/TASK-M8-I18N-02-Validation-Tooling.md",
  "docs/tasks/TASK-M8-I18N-03-CI-Integration.md",
  "codex_outputs/phase9_localization_tasks_summary.md",
]
validation = [
  "Localization service loads JSON without errors",
  "Validation tool catches all missing keys",
  "CI fails when keys are missing",
]
human_approval_required = true
approval_prompt = "Review localization tasks. Ready for Phase 10 (Documentation Gaps)?"

# ============================================================================
# PHASE 10: Documentation Gaps - Graphics & World Bible
# ============================================================================
[execution_phases.phase_10_documentation_creation]
name = "Create Missing Documentation"
priority = "LOW"
estimated_effort = "20-30m"
objectives = [
  "Address GRAPHIC_DOC_MISSING_COMPLETLY.md gap",
  "CREATE new document: docs/ART_STYLE_GUIDE.md",
  "  - Define pixel art style (16×16→64px upscale)",
  "  - Color palette specifications",
  "  - Character/monster design guidelines",
  "  - Animation guidelines (frame counts, timing)",
  "  - Tileset design rules",
  "  - UI asset style guide",
  "  - VFX philosophy",
  "Address WORLD_BIBLE_TD.md note about thematic content",
  "CREATE task file extensions for biome content creation",
  "  - Reference WORLD_BIBLE.md factions in biome data",
  "  - Ensure loot tables match faction signatures",
  "All art specs must reference existing CC0 placeholder requirements",
]
inputs = [
  "docs/TODO/GRAPHIC_DOC_MISSING_COMPLETLY.md",
  "docs/TODO/WORLD_BIBLE_TD.md",
  "docs/WORLD_BIBLE.md",
]
outputs = [
  "docs/ART_STYLE_GUIDE.md",
  "codex_outputs/phase10_documentation_summary.md",
]
validation = [
  "Art style guide is comprehensive and actionable",
  "World Bible factions match planned biome system",
]
human_approval_required = true
approval_prompt = "Review new documentation. Ready for Phase 11 (Final Master Report)?"

# ============================================================================
# PHASE 11: Master Task Summary & Integration Report
# ============================================================================
[execution_phases.phase_11_master_summary]
name = "Generate Master Task Integration Report"
priority = "CRITICAL"
estimated_effort = "15-20m"
objectives = [
  "Compile all created task files into master summary",
  "Generate dependency graph showing how new tasks integrate with existing M1-M6",
  "Create recommended implementation order (considering dependencies)",
  "Identify new Milestone proposals (M7: FTUE, M8: Localization, etc.)",
  "Generate statistics: total new tasks, by priority, by milestone",
  "Create actionable next steps for project maintainers",
]
inputs = [
  "All outputs from Phases 1-10",
  "All newly created task files",
]
outputs = [
  "codex_outputs/phase11_master_task_report.md",
  "codex_outputs/phase11_integration_dependency_graph.md",
  "codex_outputs/phase11_implementation_roadmap.md",
  "codex_outputs/phase11_statistics.md",
]
validation = [
  "All 11 TODO gaps have corresponding tasks",
  "All tasks follow project conventions",
  "Dependency graph is acyclic",
  "Implementation order is logical",
]
human_approval_required = true
approval_prompt = "Review master summary. All gaps filled? Tasks ready for implementation? Ready to commit results?"

# ==============================================================================
# GLOBAL VALIDATION RULES
# ==============================================================================
[validation]
focus_areas = [
  "task_consistency",
  "architecture_patterns",
  "data_driven_design",
  "testability",
]
excluded_paths = ["codex_outputs/**"]

[validation.task_consistency]
# All new tasks must follow these patterns
required_sections = [
  "Milestone",
  "Priority",
  "Estimated Effort",
  "Dependencies",
  "Objectives",
  "Acceptance Criteria",
  "Notes",
]
naming_convention = "TASK-{MILESTONE}-{SYSTEM}-{NUMBER}-{NAME}.md"

[validation.architecture_patterns]
# Ensure new tasks follow project patterns
critical_checks = [
  "Systems layer (game/systems/*) has NO Arcade dependencies",
  "All formulas parameterized in data/*.json (no hardcoded values)",
  "All data files have corresponding JSON schema validation",
  "All systems are testable with seeded RNG (PYTHONHASHSEED=0)",
  "Skills progress from usage, not kills (usage-based progression)",
  "Combat/magic formulas reference combat_rules.json parameters",
]

[validation.data_driven_design]
# All new systems must be data-driven
required_patterns = [
  "New game content defined in data/*.json, not code",
  "JSON schemas created for all new data files",
  "Validation happens at load time",
  "Easy to add content without code changes (modding-ready)",
]

[validation.testability]
# All new systems must be testable
required_patterns = [
  "Core logic in game/systems/* (no rendering dependencies)",
  "Tests use seeded RNG for deterministic results",
  "pytest-timeout applies (30s per test)",
  "Tests run via Tasks or invoke-wait wrapper",
]

# ==============================================================================
# OUTPUT FORMATS
# ==============================================================================
[output]
format = "markdown"
include_dependencies = true
include_milestones = true
include_priority = true

[output.task_file_template]
# Template for new task files
structure = """
# {TASK_ID}: {TASK_NAME}

**Milestone:** {MILESTONE}
**Priority:** {PRIORITY}
**Estimated Effort:** {EFFORT}
**Dependencies:** {DEPENDENCIES}

## Objectives

{OBJECTIVES_LIST}

## Acceptance Criteria

{ACCEPTANCE_CRITERIA_LIST}

## Implementation Notes

{IMPLEMENTATION_NOTES}

## Related Documents

{RELATED_DOCS_LIST}
"""

# ==============================================================================
# INSTRUCTIONS FOR EXECUTION
# ==============================================================================
# 1. Run `codex` from project root (C:\noc_project\UNOC\ford)
# 2. Codex executes phases sequentially with approval gates
# 3. Review generated task files after each phase
# 4. Final master report in codex_outputs/phase11_master_task_report.md
# 5. New task files created in docs/tasks/ following TASK-*.md convention
# 6. Commit all new task files + codex outputs to repository
