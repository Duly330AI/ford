{
  // See https://go.microsoft.com/fwlink/?LinkId=733558
  // for the documentation about the tasks.json format
  "version": "2.0.0",
  "tasks": [
    // === POETRY TASKS ===
    {
      "label": "poetry: install",
      "type": "shell",
      "command": "conda",
      "args": [
        "run",
        "-n",
        "ford",
        "poetry",
        "install",
        "--no-root"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": []
    },
    {
      "label": "poetry: update",
      "type": "shell",
      "command": "conda",
      "args": [
        "run",
        "-n",
        "ford",
        "poetry",
        "update"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    // === TESTING ===
    {
      "label": "pytest: run all",
      "type": "shell",
      "command": "conda",
      "args": [
        "run",
        "-n",
        "ford",
        "python",
        "-m",
        "pytest",
        "-v",
        "--tb=short"
      ],
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "dedicated"
      },
      "problemMatcher": {
        "owner": "python",
        "fileLocation": [
          "relative",
          "${workspaceFolder}"
        ],
        "pattern": {
          "regexp": "^(.*):(\\d+): (.*)$",
          "file": 1,
          "line": 2,
          "message": 3
        }
      }
    },
    {
      "label": "pytest: run with coverage",
      "type": "shell",
      "command": "conda",
      "args": [
        "run",
        "-n",
        "ford",
        "python",
        "-m",
        "pytest",
        "--cov=game",
        "--cov-report=html",
        "--cov-report=term",
        "-v"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "dedicated"
      },
      "problemMatcher": []
    },
    {
      "label": "pytest: run fast (no slow tests)",
      "type": "shell",
      "command": "conda",
      "args": [
        "run",
        "-n",
        "ford",
        "python",
        "-m",
        "pytest",
        "-v",
        "-m",
        "not slow",
        "--tb=short"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "dedicated"
      },
      "problemMatcher": []
    },
    // === LINTING ===
    {
      "label": "ruff: check all",
      "type": "shell",
      "command": "conda",
      "args": [
        "run",
        "-n",
        "ford",
        "ruff",
        "check",
        "."
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": {
        "owner": "python",
        "fileLocation": [
          "relative",
          "${workspaceFolder}"
        ],
        "pattern": {
          "regexp": "^(.*):(\\d+):(\\d+): (\\w+): (.*)$",
          "file": 1,
          "line": 2,
          "column": 3,
          "severity": 4,
          "message": 5
        }
      }
    },
    {
      "label": "ruff: fix all",
      "type": "shell",
      "command": "conda",
      "args": [
        "run",
        "-n",
        "ford",
        "ruff",
        "check",
        ".",
        "--fix"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "black: format all",
      "type": "shell",
      "command": "conda",
      "args": [
        "run",
        "-n",
        "ford",
        "black",
        "."
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    // === PRE-COMMIT ===
    {
      "label": "pre-commit: run all",
      "type": "shell",
      "command": "conda",
      "args": [
        "run",
        "-n",
        "ford",
        "pre-commit",
        "run",
        "--all-files"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "dedicated"
      },
      "problemMatcher": []
    },
    {
      "label": "pre-commit: install hooks",
      "type": "shell",
      "command": "conda",
      "args": [
        "run",
        "-n",
        "ford",
        "pre-commit",
        "install"
      ],
      "group": "none",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    // === GAME ===
    {
      "label": "run: FORD game",
      "type": "shell",
      "command": "conda",
      "args": [
        "run",
        "-n",
        "ford",
        "python",
        "-m",
        "game.main"
      ],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated"
      },
      "problemMatcher": []
    },
    // === COMPOUND TASKS ===
    {
      "label": "lint: all (ruff + black + pre-commit)",
      "dependsOn": [
        "ruff: check all",
        "black: format all",
        "pre-commit: run all"
      ],
      "dependsOrder": "sequence",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "test: full suite (lint + test + coverage)",
      "dependsOn": [
        "ruff: check all",
        "pytest: run with coverage"
      ],
      "dependsOrder": "sequence",
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "dedicated"
      },
      "problemMatcher": []
    }
  ]
}
